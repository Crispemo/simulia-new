const mongoose = require('mongoose');
const User = require('./models/User');

// Conectar a MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ Conectado a MongoDB');
  } catch (error) {
    console.error('‚ùå Error conectando a MongoDB:', error);
    process.exit(1);
  }
};

// Funci√≥n para migrar usuarios con planes inv√°lidos
const migrateInvalidPlans = async () => {
  console.log('üîÑ Iniciando migraci√≥n de planes inv√°lidos...');
  
  try {
    // Buscar usuarios con planes inv√°lidos o sin plan
    const invalidUsers = await User.find({
      $or: [
        { plan: { $in: ['free', 'gratuito'] } },
        { plan: { $exists: false } },
        { plan: null }
      ]
    });
    
    console.log(`üìä Encontrados ${invalidUsers.length} usuarios con planes inv√°lidos`);
    
    if (invalidUsers.length === 0) {
      console.log('‚úÖ No hay usuarios con planes inv√°lidos');
      return;
    }
    
    let migrated = 0;
    let deleted = 0;
    
    for (const user of invalidUsers) {
      try {
        console.log(`üîÑ Procesando usuario: ${user.email || user.userId} (plan actual: ${user.plan})`);
        
        // Si el usuario tiene stripeId, mantener plan null hasta que se determine el plan correcto
        if (user.stripeId) {
          await User.findByIdAndUpdate(user._id, {
            plan: null // Mantener null hasta determinar el plan correcto
          });
          migrated++;
          console.log(`‚úÖ Plan establecido a null para usuario con stripeId: ${user.email || user.userId}`);
        } else {
          // Si no tiene stripeId, eliminar el usuario (no deber√≠a existir sin suscripci√≥n)
          await User.findByIdAndDelete(user._id);
          deleted++;
          console.log(`üóëÔ∏è Eliminado usuario sin suscripci√≥n: ${user.email || user.userId}`);
        }
      } catch (error) {
        console.error(`‚ùå Error procesando usuario ${user._id}:`, error.message);
      }
    }
    
    console.log('\nüìà Resumen de migraci√≥n:');
    console.log(`‚úÖ Usuarios migrados: ${migrated}`);
    console.log(`üóëÔ∏è Usuarios eliminados: ${deleted}`);
    
  } catch (error) {
    console.error('‚ùå Error en migraci√≥n:', error);
  }
};

// Funci√≥n para validar la integridad de los datos
const validateDataIntegrity = async () => {
  console.log('üîç Validando integridad de datos...');
  
  try {
    // Contar usuarios por plan
    const planCounts = await User.aggregate([
      { $group: { _id: '$plan', count: { $sum: 1 } } },
      { $sort: { count: -1 } }
    ]);
    
    console.log('\nüìä Distribuci√≥n de planes:');
    planCounts.forEach(plan => {
      console.log(`  ${plan._id}: ${plan.count} usuarios`);
    });
    
    // Verificar usuarios sin stripeId
    const usersWithoutStripeId = await User.countDocuments({
      stripeId: { $exists: false }
    });
    
    // Verificar usuarios con plan null
    const usersWithNullPlan = await User.countDocuments({
      plan: null
    });
    
    console.log(`\n‚ö†Ô∏è Usuarios sin stripeId: ${usersWithoutStripeId}`);
    console.log(`‚ö†Ô∏è Usuarios con plan null: ${usersWithNullPlan}`);
    
    // Verificar usuarios duplicados por email
    const duplicateEmails = await User.aggregate([
      { $group: { _id: '$email', count: { $sum: 1 } } },
      { $match: { count: { $gt: 1 } } }
    ]);
    
    if (duplicateEmails.length > 0) {
      console.log(`\n‚ö†Ô∏è Emails duplicados encontrados: ${duplicateEmails.length}`);
      duplicateEmails.forEach(dup => {
        console.log(`  ${dup._id}: ${dup.count} usuarios`);
      });
    } else {
      console.log('\n‚úÖ No se encontraron emails duplicados');
    }
    
  } catch (error) {
    console.error('‚ùå Error en validaci√≥n:', error);
  }
};

// Funci√≥n principal
const main = async () => {
  console.log('üöÄ Iniciando migraci√≥n de planes inv√°lidos');
  console.log('==========================================');
  
  await connectDB();
  
  // Migrar planes inv√°lidos
  await migrateInvalidPlans();
  
  // Validar integridad
  await validateDataIntegrity();
  
  console.log('\n‚úÖ Migraci√≥n completada');
  process.exit(0);
};

// Ejecutar si se llama directamente
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
  });
}

module.exports = { migrateInvalidPlans, validateDataIntegrity };
